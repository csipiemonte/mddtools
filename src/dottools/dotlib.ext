import dot;

extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::naming;
extension org::eclipse::xtend::util::stdlib::elementprops;

extension dottools::Extensions reexport;


create dot::NodeStmt mapToNode( Object source ):
	setName( source.dotId() );	
	
create dot::NodeStmt mapToNode( Object source, Object uniqueToken ):
	setName( source.dotId() );	
	
/////////////////	
//setType(dot::DotGraph graph, dot::GraphType tp) :
//graph
//;
/////////////////
	
create dot::DotGraph mapToGraph( Object source ):
    setType(dot::GraphType::digraph) ->
	setFont( "arial" );

create dot::DotGraph mapToGraph( Object source, Object uniqueToken ):
    setType(dot::GraphType::digraph) ->
	setFont( "arial" );
 
//setType(dot::DotGraph graph) :
//	graph.type

create dot::Subgraph mapToSubgraph( Object source ):
    this;

create dot::Subgraph mapToSubgraph( Object source, Object uniqueToken ):
    this;


create dot::EdgeStmtNode mapToEdge( Object source, Object target, Object token ):
    setNode(source.toNodeId()) ->
    edgeRHS.add(target.toRHS(token, source)) ->
    this;

create dot::EdgeRhsNode toRHS( Object o, Object source, Object token ):
   setOp(dot::EdgeOp::directed) ->
    //setOp("DIRECTED") ->
    setNode( o.toNodeId() ) ->
    this;
	

addGraph( GraphvizModel m, DotGraph g ):
	m.graphs.add( g ) -> m;

addGraphs( GraphvizModel m, Collection[DotGraph] gc ):
	m.graphs.addAll( gc ) -> m;

setArrowHead( dot::EdgeStmtNode edge, String kind ):
	edge.attrLists.add( attr( edge, "arrowhead", kind ) ) -> edge;

setArrowTail( dot::EdgeStmtNode edge, String kind ):
	edge.attrLists.add( attr( edge, "arrowtail", kind ) ) -> edge;

setStyle( dot::EdgeStmtNode edge, String kind ):
	edge.attrLists.add( attr( edge, "style", kind ) ) -> edge;

setWeight( dot::EdgeStmtNode edge, String weight ):
	edge.attrLists.add( attr( edge, "weight", weight ) ) -> edge;

setStyle( dot::NodeStmt node, String kind ):
	node.attrLists.add( attr( node, "style", kind ) ) -> node;

setColor( dot::EdgeStmtNode edge, String color ):
	edge.attrLists.add( attr( edge, "color", color ) ) -> 
	edge.attrLists.add( attr( edge, "fontcolor", color ) ) -> 
	edge;

setFontColor( dot::EdgeStmtNode edge, String color ):
	edge.attrLists.add( attr( edge, "fontcolor", color ) ) -> edge;

setFont( dot::EdgeStmtNode edge, String font ):
	edge.attrLists.add( attr( edge, "fontname", font ) ) -> edge;

setFont( dot::NodeStmt node, String font ):
	node.attrLists.add( attr( node, "fontname", font ) ) -> node;

setFontSize( dot::EdgeStmtNode edge, String font ):
	edge.attrLists.add( attr( edge, "fontsize", font ) ) -> edge;

setFontSize( dot::NodeStmt node, String font ):
	node.attrLists.add( attr( node, "fontsize", font ) ) -> node;

setFont( dot::DotGraph g, String font ):
	g.setProperty( "fontname", font ) -> g;

mapToDirectedEdge( Object source, Object target, Object token ):
	mapToEdge(source, target, token);
	
setAttribute( dot::EdgeStmtNode edge, String name, String value ):
	edge.attrLists.add( attr( edge, name, value ) ) -> edge;
	
setAttribute( dot::NodeStmt node, String name, String value ):
	node.attrLists.add( attr( node, name, value ) ) -> node;

dot::NodeId toNodeId(Object o):
	let id = new dot::NodeId: id.setName(o.dotId()) -> id;

dot::NodeId toNodeId(NodeStmt node) :
	let id = new dot::NodeId: 
		id.setName(node.node.name==null ? node.dotId() : node.getProperty("name")) 
	-> id;

setLabel( NodeStmt n, String name ):	
	n.attrLists.add( attr( n, "label", name ) ) -> n;

setLabel( EdgeStmtNode n, String name ):	
	n.attrLists.add( attr( n, "label", name ) ) -> n;
	
setHeadLabel( EdgeStmtNode n, String name ):	
	n.attrLists.add( attr( n, "headlabel", name ) ) -> n;
	
setTailLabel( EdgeStmtNode n, String name ):	
	n.attrLists.add( attr( n, "taillabel", name ) ) -> n;
	
setShape( NodeStmt n, String shape ):	
	n.attrLists.add( attr( n, "shape", shape ) ) -> n;
	
create dot::AttrList attr( Object ctx, String name, String value ):
	ctx.attrIMPL(name, value) ;
 		
create dot::AttrList attrIMPL( Object ctx, String name, String value ):
	attr("name",  name ) -> attr("value", value );
 
setName( dot::NodeStmt stmt, String name ):
	stmt.setName( name ) -> stmt;		

setName( dot::Subgraph g, String name ):
	g.setName( name ) -> g;		

addStatements( dot::Subgraph g, List[dot::Stmt] s ): 
	g.stmts.addAll( s ) -> g;
 
addStatements( dot::DotGraph g, List[dot::Stmt] s ): 
	g.stmts.addAll( s ) -> g;
 
addStatement( dot::Subgraph g, dot::Stmt s ): 
	g.stmts.add( s ) -> g;
 
addStatement( dot::DotGraph g, dot::Stmt s ): 
	g.stmts.add( s ) -> g;
 
setLabel( dot::NodeStmt s, List[String] parts ):
	s.setLabel( "{"+parts.toString("|")+"}" ) -> s;
		
/**
 * Sets the filling color of this shape. Filling requires that attribute style is set to 'filled'.
 * This function will add this property if it did not exist.
 * @param node The graph node
 * @param color Color name
 * @return the node
 */
setFillColor( dot::NodeStmt node, String color ):
	node.attrLists.add( attr( node, "fillcolor", color ) ) ->
	if !node.attrLists.attributes.exists(a|a.name=="style" && a.value.contains("filled")) 
		then node.setAttribute("style", "filled")
		->
	node;
	
setLineColor( dot::NodeStmt node, String color ):
	node.attrLists.add( attr( node, "color", color ) ) -> node;
	
setLabel( dot::Subgraph graph, String label ):
	graph.setProperty( "label", label ) -> graph;

cached String dotId( Object o ): 
	JAVA it.csi.mddtools.dottools.UidUtil.newUid( java.lang.Object ); 
	

setAttribute( dot::Subgraph graph, String name, String value ):
	let attrStmt = (AttrStmt)(graph.stmts.typeSelect(AttrStmt)).first() :
	if (attrStmt != null) then 
		//graph.attributes.add( attr( graph, name, value ) ) -> graph;
		attrStmt.attrLists.add(attr(graph, name, value)) -> graph;


List[AttrStmt] getAttributes(dot::DotGraph graph) :
	let attrStmt = (AttrStmt)(graph.stmts.typeSelect(AttrStmt)).first() :
		attrStmt; 

//setAttribute( dot::DotGraph graph, String name, String value ):
//	graph.attributes.add( attr( graph, name, value ) ) -> graph;

		
filename( DotGraph this ): name+".dot";		